// Generated by CoffeeScript 1.10.0
(function() {
  var Handlebars, P, YAML, contentfile, cp, fs, marked, mkdirp, sassRender, theme, traverse,
    hasProp = {}.hasOwnProperty;

  P = require('bluebird');

  Handlebars = require('handlebars');

  YAML = require('yamljs');

  traverse = require('traverse');

  marked = require('marked');

  fs = P.promisifyAll(require('fs'));

  mkdirp = P.promisify(require('mkdirp'));

  cp = P.promisify(require('glob-copy'));

  sassRender = P.promisify(require('node-sass').render);

  contentfile = 'clive';

  theme = 'splash1';

  mkdirp('./dist').then(function() {
    var content, key, promise, results, tasks;
    content = YAML.load('./content/' + contentfile + '.yml');
    traverse(content).forEach(function(x) {
      if (typeof x === "string" && x.includes('\n')) {
        return marked(x);
      }
    });
    tasks = {
      html: fs.readFileAsync('./src/template.hbs').then(function(file) {
        var template;
        template = Handlebars.compile(file.toString());
        return fs.writeFile('./dist/index.html', template(content));
      }),
      sass: fs.readFileAsync('./src/themes/' + theme + '.sass').then(function(file) {
        var template;
        template = Handlebars.compile(file.toString());
        return sassRender({
          data: template(content),
          indentedSyntax: true
        });
      }).then(function(css) {
        return fs.writeFile('./dist/' + theme + '.css', css.css);
      }),
      js: cp('./src/themes/' + theme + '.js', './dist')
    };
    results = [];
    for (key in tasks) {
      if (!hasProp.call(tasks, key)) continue;
      promise = tasks[key];
      results.push(promise.then(function() {
        return {
          resolved: true
        };
      }).error(function(e) {
        return {
          resolved: false,
          log: e.stack
        };
      })["catch"](function(e) {
        return {
          resolved: false,
          log: e
        };
      }));
    }
    return results;
  }).all().then(function(all) {
    var i, len, resolution;
    for (i = 0, len = all.length; i < len; i++) {
      resolution = all[i];
      if (!resolution.resolved) {
        console.log(resolution.log);
      }
    }
    return console.log("Resolved.");
  })["catch"](function(e) {
    return console.log(e.stack);
  });

}).call(this);
